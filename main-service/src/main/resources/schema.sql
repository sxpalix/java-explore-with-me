DROP TABLE IF EXISTS users, categories, locations, events, participation_requests, compilations, compilations_events CASCADE;

CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  VARCHAR(250) NOT NULL,
    email VARCHAR(254) NOT NULL,
    CONSTRAINT uq_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT uq_names UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS locations
(
    id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lat REAL NOT NULL,
    lon REAL NOT NULL,
    radius REAL,
    name varchar(100)
);

CREATE TABLE IF NOT EXISTS events
(
    id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    initiator_id       BIGINT                      NOT NULL,
    category_id        BIGINT                      NOT NULL,
    location_id        BIGINT                      NOT NULL,
    confirmed_requests BIGINT                      NOT NULL,
    title              VARCHAR(120)                NOT NULL,
    annotations        VARCHAR(2000)               NOT NULL,
    description        VARCHAR(7000)               NOT NULL,
    state              VARCHAR(60)                 NOT NULL,
    event_date         TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    created_on         TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    published_on       TIMESTAMP WITHOUT TIME ZONE,
    participant_limit  INTEGER DEFAULT 0,
    paid               BOOLEAN DEFAULT FALSE,
    request_moderation BOOLEAN DEFAULT FALSE,
    CONSTRAINT fk_event_initiator FOREIGN KEY (initiator_id) REFERENCES users (id),
    CONSTRAINT fk_event_category FOREIGN KEY (category_id) REFERENCES categories (id),
    CONSTRAINT fk_event_location FOREIGN KEY (location_id) REFERENCES locations (id)
);

CREATE TABLE IF NOT EXISTS participation_requests
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id      BIGINT                      NOT NULL,
    event_id     BIGINT                      NOT NULL,
    status       VARCHAR(60)                 NOT NULL,
    created_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    CONSTRAINT fk_participation_request_requester FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_participation_request_event FOREIGN KEY (event_id) REFERENCES events (id),
    CONSTRAINT uc_unique_requester_event UNIQUE (user_id, event_id)
);

CREATE TABLE IF NOT EXISTS compilations
(
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title  VARCHAR(255) NOT NULL,
    pinned BOOLEAN      NOT NULL
);

CREATE TABLE IF NOT EXISTS compilations_events
(
    compilation_id BIGINT,
    event_id       BIGINT,
    CONSTRAINT fk_compilation_id FOREIGN KEY (compilation_id) REFERENCES compilations (id),
    CONSTRAINT fk_event_id FOREIGN KEY (event_id) REFERENCES events (id),
    PRIMARY KEY (compilation_id, event_id)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist float = 0;
        rad_lat1 float;
        rad_lat2 float;
        theta float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            rad_lat1 = pi() * lat1 / 180;
            rad_lat2 = pi() * lat2 / 180;
            theta = lon1 - lon2;
            rad_theta = pi() * theta / 180;
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

            IF dist > 1
            THEN dist = 1;
            END IF;

            dist = acos(dist);
            dist = dist * 180 / pi();
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;
'
    LANGUAGE PLPGSQL;