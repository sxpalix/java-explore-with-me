{
	"info": {
		"_postman_id": "a04b40f3-00f3-45de-b318-0990eeae248d",
		"name": "Test Explore With Me - Feature (locations)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28215670"
	},
	"item": [
		{
			"name": "Добавление нового пользователя (1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"    const u1id = target.id;\r",
							"\r",
							"    pm.environment.set(\"u1id\", u1id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.name).equal(source.name, 'Имя пользователя должно соответствовать имени в запросе');\r",
							"    pm.expect(target.email).equal(source.email, 'Email пользователя должен соответствовать email пользователя в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Tester\",\r\n    \"email\": \"tester@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового пользователя (2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const u2id = target.id;\r",
							"\r",
							"    pm.environment.set(\"u2id\", u2id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.name).equal(source.name, 'Имя пользователя должно соответствовать имени в запросе');\r",
							"    pm.expect(target.email).equal(source.email, 'Email пользователя должен соответствовать email пользователя в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"greg\",\r\n    \"email\": \"greg@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление новой категории (1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const c1id = target.id;\r",
							"\r",
							"    pm.environment.set(\"c1id\", c1id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.name).equal(source.name, 'Название категории должно соответствовать названию в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Концерты\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление новой категории (2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const c2id = target.id;\r",
							"\r",
							"    pm.environment.set(\"c2id\", c2id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.name).equal(source.name, 'Название категории должно соответствовать названию в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Новый Год\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации города (1) администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const l1id = target.id;\r",
							"\r",
							"    pm.environment.set(\"l1id\", l1id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.lat.toString()).equal(source.lat, 'Широта локации должна соответствовать широте в запросе');\r",
							"    pm.expect(target.lon.toString()).equal(source.lon, 'Долгота локации должна соответствовать долготе в запросе');\r",
							"    pm.expect(target.name).equal(source.name, 'Название локации должно соответствовать названию в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Радиус локации должен быть корректным\", function () {\r",
							"    pm.expect(target.radius).to.eql(800.25);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lat\": \"55.74428\",\r\n    \"lon\": \"37.565933\",\r\n    \"name\": \"г.Москва ТЦ Европейский\",\r\n    \"radius\": \"800.25\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации (2), находящейся внутри города, администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const l2id = target.id;\r",
							"\r",
							"    pm.environment.set(\"l2id\", l2id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.lat.toString()).equal(source.lat, 'Широта локации должна соответствовать широте в запросе');\r",
							"    pm.expect(target.lon.toString()).equal(source.lon, 'Долгота локации должна соответствовать долготе в запросе');\r",
							"    pm.expect(target.name).equal(source.name, 'Название локации должно соответствовать названию в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Радиус локации должен быть корректным\", function () {\r",
							"    pm.expect(target.radius).to.eql(298.25);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lat\": \"55.752003\",\r\n    \"lon\": \"37.617733\",\r\n    \"name\": \"Кремль\",\r\n    \"radius\": \"298.25\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации (3), находящейся внутри города, администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const l3id = target.id;\r",
							"    const l4id = target.id + 1;\r",
							"\r",
							"    pm.environment.set(\"l3id\", l3id);\r",
							"    pm.environment.set(\"l4id\", l4id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.lat.toString()).equal(source.lat, 'Широта локации должна соответствовать широте в запросе');\r",
							"    pm.expect(target.lon.toString()).equal(source.lon, 'Долгота локации должна соответствовать долготе в запросе');\r",
							"    pm.expect(target.name).equal(source.name, 'Название локации должно соответствовать названию в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Радиус локации должен быть корректным\", function () {\r",
							"    pm.expect(target.radius).to.eql(500.00);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lat\": \"55.776077\",\r\n    \"lon\": \"37.65186\",\r\n    \"name\": \"Площадь 3 вокзалов\",\r\n    \"radius\": \"500.00\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового события (1) с локацией 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const e1id = target.id;\r",
							"\r",
							"    pm.environment.set(\"e1id\", e1id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны быть корректными\", function () {\r",
							"    pm.expect(target.category.id).to.not.be.null;\r",
							"    pm.expect(target.category.name).to.eql(\"Новый Год\");\r",
							"    pm.expect(target.confirmedRequests).to.eql(0);\r",
							"    pm.expect(target.createdOn).to.not.be.null;\r",
							"    pm.expect(target.initiator.id).to.not.be.null;\r",
							"    pm.expect(target.initiator.name).to.eql(\"greg\");\r",
							"    pm.expect(target.location.lat).to.eql(55.776077);\r",
							"    pm.expect(target.location.lon).to.eql(37.65186);\r",
							"    pm.expect(target.publishedOn).to.be.null;\r",
							"    pm.expect(target.state).to.eql(\"PENDING\");\r",
							"    pm.expect(target.views).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Общегородская сходка готов\",\r\n  \"category\": {{c2id}},\r\n  \"description\": \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\r\n  \"eventDate\": \"2023-12-18 23:50:00\",\r\n  \"location\": {\r\n    \"id\": {{l3id}}\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 30,\r\n  \"requestModeration\": true,\r\n  \"title\": \"ааааааааааааааааававававававааааааааааааааааа\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{u2id}}",
							"description": "id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового события (2) с пользовательской локацией, находящейся внутри города",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201); \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const e2id = target.id;\r",
							"\r",
							"    pm.environment.set(\"e2id\", e2id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны быть корректными\", function () {\r",
							"    pm.expect(target.category.id).to.not.be.null;\r",
							"    pm.expect(target.category.name).to.eql(\"Новый Год\");\r",
							"    pm.expect(target.confirmedRequests).to.eql(0);\r",
							"    pm.expect(target.createdOn).to.not.be.null;\r",
							"    pm.expect(target.initiator.id).to.not.be.null;\r",
							"    pm.expect(target.initiator.name).to.eql(\"Tester\");\r",
							"    pm.expect(target.location.lat).to.eql(55.74704);\r",
							"    pm.expect(target.location.lon).to.eql(37.62537);\r",
							"    pm.expect(target.publishedOn).to.be.null;\r",
							"    pm.expect(target.state).to.eql(\"PENDING\");\r",
							"    pm.expect(target.views).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Пикник на набережной в сквере\",\r\n  \"category\": {{c2id}},\r\n  \"description\": \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\r\n  \"eventDate\": \"2024-06-12 12:00:00\",\r\n  \"location\": {\r\n    \"lat\": \"55.74704\",\r\n    \"lon\": \"37.62537\"\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 7,\r\n  \"requestModeration\": true,\r\n  \"title\": \"ааааааааааааааааававававававааааааааааааааааа\"\r\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{u1id}}",
							"description": "id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации (5), находящейся далеко от предыдущих, администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const l5id = target.id;\r",
							"\r",
							"    pm.environment.set(\"l5id\", l5id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.lat.toString()).equal(source.lat, 'Широта локации должна соответствовать широте в запросе');\r",
							"    pm.expect(target.lon.toString()).equal(source.lon, 'Долгота локации должна соответствовать долготе в запросе');\r",
							"    pm.expect(target.name).equal(source.name, 'Название локации должно соответствовать названию в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Радиус локации должен быть корректным\", function () {\r",
							"    pm.expect(target.radius).to.eql(2800.00);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lat\": \"48.912926\",\r\n    \"lon\": \"2.467391\",\r\n    \"name\": \"Paris, Bondy\",\r\n    \"radius\": \"2800.00\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового события (3), находящегося на отдаленной локации (5)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const e3id = target.id;\r",
							"\r",
							"    pm.environment.set(\"e3id\", e3id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны быть корректными\", function () {\r",
							"    pm.expect(target.category.id).to.not.be.null;\r",
							"    pm.expect(target.category.name).to.eql(\"Концерты\");\r",
							"    pm.expect(target.confirmedRequests).to.eql(0);\r",
							"    pm.expect(target.createdOn).to.not.be.null;\r",
							"    pm.expect(target.initiator.id).to.not.be.null;\r",
							"    pm.expect(target.initiator.name).to.eql(\"Tester\");\r",
							"    pm.expect(target.location.lat).to.eql(48.912926);\r",
							"    pm.expect(target.location.lon).to.eql(2.467391);\r",
							"    pm.expect(target.publishedOn).to.be.null;\r",
							"    pm.expect(target.state).to.eql(\"PENDING\");\r",
							"    pm.expect(target.views).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Concert de Mireille Mathieu\",\r\n  \"category\": {{c1id}},\r\n  \"description\": \"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\r\n  \"eventDate\": \"2024-01-12 16:00:00\",\r\n  \"location\": {\r\n    \"id\": {{l5id}}\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 2800,\r\n  \"requestModeration\": false,\r\n  \"title\": \"ааааааааааааааааававававававааааааааааааааааа\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{u1id}}",
							"description": "id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события 1 администратором",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e1id}}",
							"description": "id публикуемого события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события 2 администратором",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e2id}}",
							"description": "id публикуемого события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события 3 администратором",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{e3id}}",
							"description": "id публикуемого события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех добавленных админом локаций",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и список локаций в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(body).is.an(\"array\");\r",
							"});\r",
							"\r",
							"const firstLoc = body[0];\r",
							"\r",
							"pm.test(\"Локация должна содержать поля: id, name, lat, lon, radius\", function () {\r",
							"    pm.expect(firstLoc.id).to.not.be.null;\r",
							"    pm.expect(firstLoc.name).equal(\"г.Москва ТЦ Европейский\");\r",
							"    pm.expect(firstLoc.lat).equal(55.74428);\r",
							"    pm.expect(firstLoc.lon).equal(37.565933);\r",
							"    pm.expect(firstLoc.radius).equal(800.25);\r",
							"});\r",
							"\r",
							"const secondLoc = body[1];\r",
							"\r",
							"pm.test(\"Локация должна содержать поля: id, name, lat, lon, radius\", function () {\r",
							"    pm.expect(secondLoc.id).to.not.be.null;\r",
							"    pm.expect(secondLoc.name).equal(\"Кремль\");\r",
							"    pm.expect(secondLoc.lat).equal(55.752003);\r",
							"    pm.expect(secondLoc.lon).equal(37.617733);\r",
							"    pm.expect(secondLoc.radius).equal(298.25);\r",
							"});\r",
							"\r",
							"const thirdLoc = body[2];\r",
							"\r",
							"pm.test(\"Локация должна содержать поля: id, name, lat, lon, radius\", function () {\r",
							"    pm.expect(thirdLoc.id).to.not.be.null;\r",
							"    pm.expect(thirdLoc.name).equal(\"Площадь 3 вокзалов\");\r",
							"    pm.expect(thirdLoc.lat).equal(55.776077);\r",
							"    pm.expect(thirdLoc.lon).equal(37.65186);\r",
							"    pm.expect(thirdLoc.radius).equal(500.00);\r",
							"});\r",
							"\r",
							"const fourthLoc = body[3];\r",
							"\r",
							"pm.test(\"Локация должна содержать поля: id, name, lat, lon, radius\", function () {\r",
							"    pm.expect(fourthLoc.id).to.not.be.null;\r",
							"    pm.expect(fourthLoc.name).equal(\"Paris, Bondy\");\r",
							"    pm.expect(fourthLoc.lat).equal(48.912926);\r",
							"    pm.expect(fourthLoc.lon).equal(2.467391);\r",
							"    pm.expect(fourthLoc.radius).equal(2800.00);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение добавленной админом локации по id 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Локация должна содержать поля: id, name, lat, lon, radius\", function () {\r",
							"    pm.expect(body.id).to.be.not.null;\r",
							"    pm.expect(body.name).equal(\"Paris, Bondy\");\r",
							"    pm.expect(body.lat).equal(48.912926);\r",
							"    pm.expect(body.lon).equal(2.467391);\r",
							"    pm.expect(body.radius).equal(2800.00);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/locations/:locId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"locations",
						":locId"
					],
					"variable": [
						{
							"key": "locId",
							"value": "{{l5id}}",
							"description": "id искомой локации"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение опубликованных событий, проходящих в пределах локации 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и список событий в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(body).is.an(\"array\");\r",
							"});\r",
							"\r",
							"const firstEvent = body[0];\r",
							"\r",
							"pm.test(\"Ивент должен содержать все корректные поля\", function () {\r",
							"    pm.expect(firstEvent.id).to.be.not.null;\r",
							"    pm.expect(firstEvent.annotation).equal(\"Общегородская сходка готов\");\r",
							"});\r",
							"\r",
							"const secondEvent = body[1];\r",
							"\r",
							"pm.test(\"Ивент должен содержать все корректные поля\", function () {\r",
							"    pm.expect(secondEvent.id).to.be.not.null;\r",
							"    pm.expect(secondEvent.annotation).equal(\"Пикник на набережной в сквере\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/events/locations/:distance?lat=55.741142&lon=37.619224",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"locations",
						":distance"
					],
					"query": [
						{
							"key": "lat",
							"value": "55.741142"
						},
						{
							"key": "lon",
							"value": "37.619224"
						}
					],
					"variable": [
						{
							"key": "distance",
							"value": "200.000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление отдаленной локации (6) без радиуса администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"    const source = JSON.parse(pm.request.body.raw);\r",
							"    const target = pm.response.json();\r",
							"\r",
							"    const l6id = target.id;\r",
							"\r",
							"    pm.environment.set(\"l6id\", l6id);\r",
							"\r",
							"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.lat).equal(source.lat, 'Широта локации должна соответствовать широте в запросе');\r",
							"    pm.expect(target.lon).equal(source.lon, 'Долгота локации должна соответствовать долготе в запросе');\r",
							"    pm.expect(target.name).equal(source.name, 'Название локации должно соответствовать названию в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Радиус локации должен быть корректным\", function () {\r",
							"    pm.expect(target.radius).to.eql(0.0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lat\": 59.614017,\r\n    \"lon\": 150.78976,\r\n    \"name\": \"Магадан\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск событий в пределах локации без событий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и список событий в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(body).is.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/locations/:distance?lat=100.741142&lon=100.619224",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"locations",
						":distance"
					],
					"query": [
						{
							"key": "lat",
							"value": "100.741142"
						},
						{
							"key": "lon",
							"value": "100.619224"
						}
					],
					"variable": [
						{
							"key": "distance",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации c name length > 501, администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lat\": \"50.66282\",\r\n    \"lon\": \"29.20404\",\r\n    \"name\": \"fhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\",\r\n    \"radius\": \"298.25\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление админом локации с уже существующими параметрами",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lat\": \"48.912925\",\r\n    \"lon\": \"2.467391\",\r\n    \"name\": \"Paris, France\",\r\n    \"radius\": \"2800.00\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "удаление локации, к которой привязано событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/locations/{{l3id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						"{{l3id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение несуществующей локации по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/locations/999999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"locations",
						"999999"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "u1id",
			"value": "",
			"type": "string"
		},
		{
			"key": "u2id",
			"value": "",
			"type": "string"
		},
		{
			"key": "c1id",
			"value": "",
			"type": "string"
		},
		{
			"key": "c2id",
			"value": "",
			"type": "string"
		},
		{
			"key": "l1id",
			"value": "",
			"type": "string"
		},
		{
			"key": "l2id",
			"value": "",
			"type": "string"
		},
		{
			"key": "l3id",
			"value": "",
			"type": "string"
		},
		{
			"key": "l5id",
			"value": "",
			"type": "string"
		},
		{
			"key": "l6id",
			"value": "",
			"type": "string"
		},
		{
			"key": "e1id",
			"value": "",
			"type": "string"
		},
		{
			"key": "e2id",
			"value": "",
			"type": "string"
		},
		{
			"key": "e3id",
			"value": "",
			"type": "string"
		}
	]
}